
/**
 * Classe Mot : operations sur des mots (tp3) 
 * licence S4 - UE POO
 * @author : FerlicotDelbecque Cyril
 */ 

public class Mot {

    // ATTRIBUTS
    private String valeur;


    // CONSTRUCTEURS
    public Mot(String s) {
	this.valeur = s;
    }


    // METHODES

    /**
     *Principal function for test the 'longueur' and the 'toString' all the methods
     */
    public static void main(String[] args) {
	if (args.length <= 0) {
	    System.out.println("usage : Java Mot <unMot>");
	    System.exit(0);
	}	

	Mot unMot = new Mot(args[0]);
	System.out.println(unMot.longueur());
	System.out.println(unMot);
	System.out.println(unMot.nbOccurrencesOfChar('c'));
	System.out.println(unMot.inverse());
    }

    /** vaut vrai <code>o</code> est egal a ce mot, c'est-a-dire si
     * <code>o</code> est un Mot et si sa valeur est la meme que celle
     * de ce mot
     * @param o l'objet a comparer a ce mot
     * @return <code>true</code> ssi <code>o</code> est un Mot et sa
     * valeur est la meme que celle de ce mot
     */
    public boolean equals(Object o) {
	if (o instanceof Mot) {
	    Mot lAutre = (Mot) o;
	    return this.valeur.equals(lAutre.valeur);
	}
	else {
	    return false;
	}
    }


    /** 
     *'longueur' return the number of letters on the 'Mot'. 
     *@return the number of letters of the 'Mot'. 
     */
    public int longueur(){
	return (this.valeur.length());
    }

    /** 
     * 'toString' print the 'Mot'.
     * @return String which correspond to the 'Mot'.
     *
     */
    public String toString(){
	return this.valeur;
    }


    /**
     *return the number of a certain character in a String.
     *@param a character
     *@return the number of this character in the 'Mot'
     */
    public int nbOccurrencesOfChar(char c) {
	int cpt;
	int arrive;
	arrive=this.valeur.indexOf(c);
	cpt = 0;
	while(arrive != (-1)){
	    cpt++;
	    arrive = this.valeur.indexOf(c, ++arrive);
	}

	return cpt;
    } 


    /** 
     * inverse() create a new object with a 'valeur' which is the reverse of the 'valeur' of our 'Mot'.
     *@return : a new 'Mot' which a 'valeur' reverse.
     *
     */
    public Mot inverse() {
	String val;
	int longe;
	val = "";
	longe = this.longueur();
	for (int i = longe-1; i != -1; i--){
	    val = val + Character.toString(this.valeur.charAt(i));
	}
	
	return (new Mot(val));
    }


    /** COMPLETER 
     * 
     */
    public boolean estPalindrome(){
	return false;
    } // estPalindrome



    /** COMPLETER 
     * 
     */
    public boolean contient(Mot m) {
	return false;
    }

    /** COMPLETER 
     * 
     */
    public boolean rimeAvec(Mot m) {
	return false;
    }


    /** COMPLETER 
     */
    public boolean estNomPropre() {
	return false;
    }


    /** COMPLETER 
     * 
     */
    public boolean estAnagramme(Mot m) {
	return false;
    }


    /** COMPLETER 
     * 
     */
    public Mot[] extraitAvant(char c) {
	return null;
    }



}

