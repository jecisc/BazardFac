type 'a bloomfilter = { filter : bool array ; code : 'a -> int -> int ; nb : int}

(* Fonction qui calcule a à la puissance b*)
let rec puiss a b=
  if b = 1 then
    a
  else
    a * (puiss (a) (b-1)) 

let new_bloomfilter n f m =
  let tableau = Array.make (puiss 2 n) false in
  {filter = tableau ; code = f ; nb = m}

let add bf e =
  for i = 0 to (bf.nb -1) do (* Nous effectuons l'action pour les nb fonction de hachages *)
    let valeur=  bf.filter.(bf.code e i);
      if valeur > Array.length(bf.filter) then
	 bf.filter.((bf.code e i) mod (Array.length (bf.filter)))
      else
	 bf.filter.(bf.code e i) <- true;
  done

let contains bf e =
  let bool = ref true in (*On met au début une réponse positive puis si une des cases du tableau est fausse nous allons la passer à false *)
  for i = 0 to (bf.nb -1) do (* effectuer l'action pour les nb fonctions *)
    if not( bf.filter.(bf.code e i)) then
      bool := false;
  done;
  !bool
